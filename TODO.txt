JAVA OPTIONS:

	G1GC: -XX:+UseG1GC

	GC LOGS: -XX:+PrintGCApplicationStoppedTime -XX:+PrintGCApplicationConcurrentTime -XX:+PrintGCDetails -XX:+PrintSafepointStatistics  -XX:PrintSafepointStatisticsCount=1

- LET SERVER ALSO USE THE PROPNET?
- INIZIARE A SCRIVERE PAPER
- CHANGE PLAYOUT FOR MAST TO RECURSIVE?
v- TEST DUCT WITH SELECTION WITH NO OFFSET
v- DECAY FOR MAST
- PARALLEL ARRAYS IN THE TREE NODES
- IMPLEMENT PROPNET METHODS RETURNING INTEGERS FOR MOVES AND OPENBITSETS FOR STATES (ENCAPSULATION WILL BE LOST, BUT SAVES MEMORY)
- AGGIUNGI LOGS PER I MESSAGGI INVIATI/RICEVUTI DAL SERVER
v- SISTEMA TUTTO POI PASSA A ASYNC LOG (CONTROLLA ANCHE SUCT + AGGIUNGI COMBINAZIONI PER #ALGORITMI > #RUOLI + AGGIUNGI SYSTEM.GC DOPO OGNI MOSSA RITORNATA + RIMUOVI REPLICA MOSSE IN SUCTNODE + server messages log)
v- ADD COLLECTION OF STATS OF GC: EVERY SECOND LOG TIME, GC.COUNT AND GC.TIME, POSTPROCESS (PLOT X=TIME, Y=0 EXCEPT FOR INTERVALS OF TIME WHERE COUNT AND TIME INCREASED)
v- TRY GC:  -XX:+UseConcMarkSweepGC 
- PROVA ALTRI SEQUENTIAL
v- MCS VS DUCT AND SUCT
v- ADAPT SCRIPT COLLECTING RESULTS TO CHANGES
- ADD TO MATCH THE EXACT START TIME AND END TIME FROM GAME SERVER
- ADD TO SCRIPT COLLECTING RESULTS A CHECK: THE LAST (N-1) LOGGED MATCHES WON'T BE COUNTED IN THE STATS
- ADAPT CODE TO RUN A SUBTOURNEY FOR EACH COMBINATION OF PLAYERS SO THAT RESULTS CAN IGNORE LAST N-1 MATCHES FOR EACH COMBINATION
v- ADAPT CODE FOR ANY TYPE OF PLAYER AND NOT ONLY DUCT AND SUCT
v- ADAPT CODE FOR GAMES WITH ANY NUMBER OF PLAYERS
- WHAT ABOUT LAST N MATCHES? UNRELIABLE RESULTS

- FIX SUCT PLAYER
- CHECK LOGS IN MCS PLAYER, SUCT AND DUCT PLAYERS
v- MATCH THE THREE PLAYERS AGAINST EACH OTHER IN DIFFERENT GAMES
- MATCH SAME PLAYERS WITH DIFFERENT LOG SYSTEM AGAINST EACH OTHER



- REMEMBER TO CHANGE ALL THE VARIABLES NAMED "ACTIONS" TO VARIABLES NAMED "MOVE"
v- WHAT TO DO WHEN A TERMINAL STATE IS ADDED TO THE TREE BUT I CANNOT GET THE GOALS?
v- WHAT TO DO WHEN A NON-TERMINAL STATE IS ADDED TO THE TREE BUT I GET EXCEPTION WHEN RETRIEVING LEGAL ACTIONS?

V- LIMIT SEARCH DEPTH TO 1000 (GIVE BACK INTERMEDIATE GOAL IF ANY, OTHERWISE DRAW)
v- IN EACH NODE FOR EACH PLAYER KEEP AN ARRAY OF EXTENDED MOVES (I.E. EACH EXTENDED MOVE CONTAINS A LEGAL MOVE OF THE PLAYER, THE NUMBER OF VISITS OF THAT MOVE, THE TOT SCORE AND THE UCT VALUE- !UPDATE THE UCT VALUE ONLY WHEN YOU ALREADY HAVE TO COMPUTE IT DURING SELECTION)
v- CLEAN THE TRANSPOSITION TABLE AT EVERY GAME TURN BY REMOVING FROM IT THE NODES THAT HAVE OLD TIMESTAMP:
	1. KEEP A TURN COUNTER AND STAMP WITH IT EVERY NODE YOU VISIT DURING MCTS IN THAT TURN
	2. KEEP AN OFFSET (2)
	3. BEFORE EACH TURN INCREMENT THE COUNTER AND REMOVE FROM THE TRANSPOSITION TABLE ALL THE NODES WITH
		(STAMP < COUNTER - OFFSET)
v - DON'T SELECT THE ACTION WITH MAX UCT BUT RANDOMLY SELECT ONE AMONG THE ACTIONS THAT HAVE UCT VALUE BETWEEN [MAXUCT - 0.01, MAXUCT] (TO DO THIS FIRST ITERATE ON ALL ACTIONS AND COMPUTE MAXUCT, THEN ITERATE AGAIN AND PICK ALL ACTIONS WITH UCT VALUE IN THE [MAXUCT - 0.01, MAXUCT] INTERVAL, THEN SELECT ONE RANDOMLY)
v- WHEN A PLAYOUT FAILS GIVE BACK 0 AS SCORE FOR THE ROOT PLAYER AND 1/(#PLAYERS-1) FOR ALL OTHER PLAYERS
v- WHEN CHOOSING WHICH MOVE TO EXPAND JUST CHOOSE AN UNEXPANDED ONE FOR EACH ROLE, DON'T LOOK AT FULLY UNEXPANDED JOINT MOVES

v- IMPLEMENT DECOUPLED UCT PLAYER WITH SLOW TRANSPOSITION TABLE (THAT DOESN'T ALLOW TO MIX THE USE OF REASONERS. ONCE A REASONER HAS BEEN SELECTED AT THE BEGINNING, THAT SAME REASONER MUST BE USED THROUGHOUT ALL THE GAME).
v- TEST SPEED OF SUCH PLAYER
v- FIX SEQUENTIAL MCTS/UCT
v- TEST DECOUPLED MCTS/UCT VS SEQUENTIAL MCTS/UCT
- REMOVE TIMEOUT AS PARAMETER OF INITIALIZE() METHOD OF THE STATE MACHINE IF POSSIBLE

- WHY WHEN THERE ARE EXTRA LEGALS AND THE CORRESPONDING INPUTS ARE ADDED THE OPTIMIZATION CANNOT RECOGNIZE FOR ALL GAMES THAT THOSE LEGALS WILL ALWAYS BE FALSE?
- DETECT ANDS WITH SAME INPUTS AND MERGE THEM. SAME THING FOR ORS.
- DETECT IF THERE IS MORE THAN ONE CONNECTED COMPONENT. ARE THERE CONNECTED COMPONENTS WHIT NO USEFUL PROPOSITIONS/NOT INFLUENCED BY ANY BASE OR INPUT OR CONSTANT?
- WHAT HAPPENS IF NOTHING IS TRUE IN THE INITIAL STATE?????????

- ORDER PROPOSITION BEFORE PROPAGATING FORWARD
- WHEN YOU REMOVE BASES AND INPUT --> KEEP TRACK OF THEM IN CASE YOU NEED TO TRANSLATE BACK TO GGP BASE STRUCTURE
OK - WHEN #LEGALS > #INPUTS INSTEAD OF REMOVING LEGALS, ADD CORRESPONDING INPUT
- TEST PROPNET WITH THIS GAME: init(f). p:-true(f). p:-p. legal(lp,m). treminal:-not(true(f)). goal(lp,100):-p.  goal(lp,0):-not(p).
- RUN EXPERIMENTS ALWAYS DRAINING POOL AND CALLING GC, ON SAME SET OF GAME (DON'T UPDATE GAME CACHE! SAVE GAMES FROM GAMES.GGP.ORG/BASE) (BEFORE OR AFTER FIXING THE PROPAGATION?)
- COMPARE SPEED OF PROVER vs MODIFIED PROPNET (FWD-UNORDERED-STOPPING PROPAGATION) vs SEPARATE INTERNAL STATE PROPNET (FWD-UNORDERED-STOPPING PROPAGATION) vs SEPARATE INTERNAL STATE PROPNET (FWD-UNORDERED-STOPPING PROPAGATION + OPTIMIZATIONS) vs SEPARATE INTERNAL STATE PROPNET (FWD-ORDERED-STOPPING PROPAGATION + OPTIMIZATIONS) vs SEPARATE INTERNAL STATE PROPNET (BACKWARD PROPAGATION + OPTIMIZATIONS) !!!! WHAT HAPPENS IF BACKWARD PROPAGATION ENCOUTERS A CYCLE AND GETS STUCK?
- COMPARE ALSO ALL WITH CASH




- ADD GC RUN AND POOL DRAINING AFTER EACH GAME
- VERIFY O1B WITH ALL OTHER IMPROVEMENTS
- ADD 04 TO 01B+02+03
- FOR EACH PROPNET OPTIMIZATION MAKE A TABLE SHOWING THE DECRESE IN NUMBER OF DIFFERENT COMPONENTS AFTER APPLYING EACH IMPROVEMENT + INCLUDE TOTAL TIME SPENT AND TIME SPENT FOR EACH IMPROVEMENT
- CHECK THAT ALL RUNTIME EXCEPTION ARE THE SAME (EITHER ALL RUNTIMEEXCEPTION OR ILLEGALSTATEEXCEPTION OR WHATEVER).
- COMPARE IMPROVED PROPNET WITH PROVER AND IMPROVED PROPNET ON LINUX WITH IPROVED PROPNET ON WINDOWS
- COMPARE IMPROVED PROPNET WITH AND WITHOUT CACHE - IMPLEMENT AD HOC CACHE?
- USE CACHE FOR TRANSLATION TO/FROM STANDARD STATE AND PROPNET STATE

NI - CHECK KNIGHTAZONS IF WITH NEW ALGORITHM BUILDS AS FAST AS BEFORE - usa il verifier
OK - WHAT HAPPENS TO KNIGHTAZONS AFTER UNREACHABLE REMOVAL? CHECK COMPONENTS NUMBER BEFORE AND AFTER
OK - RUN PROPNET STRUCTURE CHECKER TO SEE IF THERE ARE DUPLICATE PROPOSITIONS  - duplicatePropChecker
OK - RE-RUN THE VERIFIER WITH NEW ALGORITHM - usa il verifier
OK - CHECK THE EXTRA LEGAL PROPOSITIONS! wHAT ARE THEY? wHAT HAPPENS TO THEM????? - seems like they are always false
OK - TEST SPEED OF EXTERNAL PROPNET WITH AND WITHOUT TRANSLATION
OK - DETECT LEGALS AND INPUTS: APPENA NE TROVI UNA CHE PUO ESSERE LEGAL O INPUT, SE IL RUOLO NON E UN RUOLO SBATTILA VIA SUBITO, NON TENERLA NELLA MAP, E DIVIDI LA MAP DELLE GDL MOVES PER RUOLO
NO - INCLUDE THE SET OF FALSE AS INPUT FOR INPUTLESS COMPONENTS IN THE PROPNET INIT
OK - SEPARATE DYNAMIC OPTIMIZABLE PROPNET FROM STATIC RUNTIME PROPNET -> CLONE STATIC PROPNET FROM OPTIMIZABLE PROPNET, COPY ONLY USEFUL STRUCTURES INTO FIXED SIZE ARRAYS + ALSO COPY FROM COMPONENTS ONLY RELEVANT DATA - IS IT POSSIBLE TO REASON WITH THE PROPNET WHEN LINKS ARE REPRESENTED BY INT INDICES ARRAYS?

PROPNET OPTIMIZATION:
OK - DETECT ANY NON-INPUT PROPOSITION THAT HAS NO INPUT AND SET FALSE AS ITS INPUT (THIS INCLUDES ALSO THE INIT PROP) - ALSO RESET ITS TYPE TO OTHER
OK - DETECT ANY COMPONENT THAT HAS NO INPUT AND SET FALSE AS ITS INPUT (EXCEPT FOR THE NOT COMPONENT WHOSE INPUT SHOULD BE SET TO TRUE).
OK - FOR ANY INPUT THAT DOESN'T CORRESPOND TO A LEGAL, SET ITS INPUT TO FALSE (IT'LL NEVER BE LEGAL TO PLAY ITS MOVE, SO IT WILL NEVER BE TRUE) - ALSO SET ITS TYPE TO OTHER
OK - IF A LEGAL CORRESPONDS TO NO INPUT??????? ERROR? OR JUST SET THE LEGAL TO FALSE???

OK - ADD TO EXCEL FILES THE RELATIVE PERCENTAG IMPROVEMENT OF THE PROPNET IMPROVEMENETS (I.E. FOR EACH GAME COMPUTE THE INCREASE/DECREASE IN ITERATION/SEC FOR EACH IMPROVEMENT E.G. TIC TAC TOE IMP1 +20% OF ITERATIONS PER SECOND...) 
OK - DETECT OR WITH NO INPUTS AND CONNECT THEM TO FALSE
OK - DETECT GATES WITH NO OUTPUT AND REMOVE THEM RECURSIVELY REMOVING INPUTS IF MAKES SENSE (I.E. THE INPUT HAS NO MORE OUTPUTS ITSELF AND IT IS USELESS -> IF IT IS A OR, AND, NOT, CONSTANT, PROPOSITION THAT IS NOT A GOAL, TERMINAL, INIT, LEGAL. BASE AND DOES? CAN I REMOVE THEM IF THEY HAVE NO OUTPUTS AT ALL?) MAYBE IT'S SAFER TO JUST REMOVE OUTPUTLESS GATES.


TO READ:
- GDL is turing-complete - Saffidine
- Detect games structures (papers and Phd thesis) - Schiffel






STAMPA GLI INPUT DI ZHADU PRIMA E DOPO AVER RIMOSSO GLI UNREACHABLE E CONTROLLA SE SONO STATI RIMOSSI QUELLI CHE NON SONO MAI LEGALI!

CRECA ESEMPIO IN CUI VENGONO RIMOSSE LE BASE E CONTROLLA SE SONO QUELLE CHE NON DIVENTANO MAI VERE PERCHE NESSUNA NEXT É SODDISFATTA



RUN CADIA WITH CORRECT PARENTHESIS

UNINSTALL CENTOS 5 LAST FROM VM

INSTALL CENTOS 6.7 ON VM

INSTALL YAP 6.2.0 ON VM

TRY YAP SPEED TEST WITH YAP 6.2.0 ON VM

IF DOESN'T WORK, UNINSTALL CENTOS 6.7 AND RE INSTALL IT, THEN INSTALL YAP 6.2.3 AND RUN SPEED TESTS
OTHERWISE UNINSTALL CENTOS 5.11 OLD GCC AND INSTALL SECOND VM OF CENTOS 6.7 THEN INSTALL YAP 6.2.3 AND RUN SPEED TESTS

MODIFY THE YAPPROVER TO ACCEPT THE USE OF XSB PROLOG AND SWI PROLOG

RUN SPEED TESTS WITH THESE!

SWITCH TO NEWER INTERPROLOG EVEN IF DOESN'T SUPPORT YAP AND TEST SPEED AGAIN



controlla se sancho ha modificato i metodi della propnet factory (remove init, remove anon, remove base and inputs)

PROPNET IMPROVEMENTS
- Represent states as array of bits, each of wich corresponds to a base prop and is =1 if the prop is true in the state, =0 otherwise
- represent moves as arrays of bits, each of wich corresponds to a does prop and is =1 if the prop is true in the joinmove, =0 otherwise
- use internal representatio of state that doesn't always translate to gdl list (i.e. translate only the move when you have to send it back)









HOW TO MANAGE THREADS AND INTERRUPTIBLE METHODS:
1. How to interrupt a thread: call the interrupt() method on the instance of the thread you want to interrupt. Note that this doesn't imply that the thread will stop immediately, moreover, it doesn't even guarantee that the thread will stop at all. The interrupt() method just asks the thread to stop, but wheather the thread will actually stop and when, depends on how the code executed by the thread has been implemented. To make sure that sooner or later the thread will stop the execution, all the code in the thread (i.e. also all the methods used in the thread) should include from time to time a check that controls if the executing thread has been interrupted (note that for a method that doesn't take very long to execute it is possible to skip this check, interruption will just be delayed by a very small amount of time, the execution time of such method). If the code detects that the thread has been interrupted it should stop execution (performing some final operations if necessary for the execution to stop cleanely).
2. How to detect if the thread executing the current code has been interrupted: use the following instruction "Thread.currentThread().isInterrupted()". This will return true if the thread has been interrupted. Note that this method won't affect the value of the interrupted status of the thread, so if the same instruction will be called somewhere else in the code run by the thread it will still return true if the thread has been interrupted (there are other ways to check for interruption that reset to false the value of the interrupted status even if the thread is still being interrupted).
3. What to do if the thread has been interrupted (i.e. Thread.currentThread().isInterrupted() returns true):
 	a. if the check is inside the run method of the thread:
	   just stop the execution performing some final operations, if necessary, for the execution to stop cleanely
	b. if the check is inside of a method called by the run() method (or one of its subcalls):
	   there are two paths to follow:
		- if the method cannot compute a consistent result or leave the program in a consistent statebefore interrupting, then it must throw an InterruptedException to signal this to its caller. In this way also the caller will know about the interruption and deal with it (i.e. stopping asap, leaving the program ina  consistent state).
		- if the method can return a consistent result or leave the program in a consistent state even if it cannot complete its execution it can just return normally
		  This case can happen when, for example, the method is computing the nodes per second that can be visited in a tree (it can compute the nodes per second 		  depending on the number of nodes visited so far and the time spent visiting the tree so far). In this case, the code that was calling this method should also 		  check for interruption, otherwise it won't notice the interruption and continue the execution normally using the result returned by the method.



IMPROVE YAP STATE MACHINE:
	1. Try to use XSB prolog instead, with XSBSubprocessEngine or NativeEngine (needs also the prolog function file to be adapted and it must be checked that everyting complies with the XSB syntax) -> If only using XSB prolog you can switch to newest version of Interprolog library.
	2. Instead of using interprolog, use JPL interface (should work for SWI prolog, not sure for other types of prolog).



- RE-RUN YAP SPEED TESTS WITHOUT NOHUP





- COMPARE PROPNET SPEED (NODES/SEC) WITH PROPNET+CASH (AND THEN WITH PROVER)
- SET UP YAP PROVER ON WINDOWS
- PLAY WITH GDLFactory CLASS TO SEE IF IT'S USEFUL TO TRANSLATE FROM STRING TO GDL (DOES IT INCREASE OR DECREASE SPEED?)
- MODIFY REFACTORED YAP PROVER CODE TO IMPROVE IT (E.G. YAPRenderer = GDLRenderer e YAPScrambler = MAppingGDLScrambler, check if it's faster with scrambling or without scrambling(without scrambling is it faster to use the renderer anyway or better gdl.toString) WHEN CHANGING PROLOG STATE: check if it's faster to retract and assert all facts on prolog or assert and retract only the diffs computed with java (i.e. prolog.retract(setDiff(currentState, nextState)), prolog.assert(setDiff(nextState, current state))))) --- tolgo dall'insieme di proposizioni che danno lo stato corrente le proposizioni che sono anche nell'insieme dello stato futuro e retraggo da prolog quelle rimanenti, poi tolgo dallo stato futuro le proposizioni che sono anche nello stato corrente e asserisco in prolog quelle rimanenti.
- MAKE ALL PATH SPECIFICATIONS IN THE CODE PLATFORM-INDEPENDENT (e.g. USING FILE.SEPARATOR IN THE CLASS "FILE")
- COMPARE YAP SPEED (NODES/SEC) WITH PROVER SPEED
- COMPARE YAP SPEED (NODES/SEC) WITH PROPNET SPEED?
- FIX THE COMMENTS FOR OVERRIDDEN METHODS IN PROPNET TO (NON-JAVADOC) COMMENTS (RICORDA CHE BASTA APRIRE IL COMMENTO CON /* E POI ANDARE A CAPO PER AVERE IL (NON-JAVADOC))
(E.G. 	/* (non-Javadoc)
	 * @see org.ggp.base.util.statemachine.StateMachine#getGoal(org.ggp.base.util.statemachine.MachineState, org.ggp.base.util.statemachine.Role)
	 */)
- FIX GAMER LOGGER LOGS (WHEN TO USE LOG, LOGERROR OR LOGSTACKTRACE?, CHECK THAT ALL EXCEPTION/ERRORS HAVE A LOGGGED MESSAGE, CHECK ALL CALLS TO GAMERLOGGER)
- WRITE CODE TO SET UP AND RUN EXPERIMENTS
- SET UP VISUALIZATION OF CSV STATISTICS
- CREATE HYBRID PROVER (HOW? IS IT BETTER TO CALL THE PROVER IF YAP FAILS OR FIRST RESET YAP AND TRY AGAIN TO ASK IT?)
- IMPROVE PROPNET IMPLEMENTING WHOLE PLAYOUT IN STATE MACHINE AND IMPLEMENTING METHODS SUCH THAT TRANSLATIONS FROM PROPNET STATE TO MACHINESTATE ARE REDUCED
- IMPROVE PROPNET WITH SUGGESTIONS FROM SANCHO'S BLOG OR FROM ITS CODE
- IMPROVE YAP PROVER (E.G. RETURN PROLOG TERMS INSTEAD OF TRANSLATING THEM FIRST TO STRINGS ON PROLOG SIDE)
- WHAT INFLUENCES PROPNET CONSTRUCTION SPEED? SOMETIMES IT BUILDS SLOW AND SOME TIMES FAST FOR SOME GAMES! --> FIND OUT WHY!
- FIX EXCEPTION LOGGING: 1. FOR EACH EXCEPTION THAT IS THROWN, ADD THE MESSAGE THAT EXPLAINS THE EXCEPTION (throw new Exception("Explanation message!")) AND LOG THAT EXCEPTION HAS BEEN THROWN 2. FOR EACH EXCEPTION THAT IS THROWN BECAUSE OF ANOTHER EXCEPTION THAT HAS BEEN CAUGHT, ADD BOTH THE MESSAGE AND THE CAUSE (throw new Exception("Explanation message!", causeException)) 3. FOR EACH CAUGHT EXCEPTION (THAT WON'T CAUSE ANOTHER EXCEPTION TO BE THROWN), LOG THE PERSONAL ERROR MESSAGE (GamerLogger.logError("Personal mex")) AND THEN THE STACK TRACE (GamerLogger.logStackTrace()). SEE http://www.avajava.com/tutorials/lessons/how-do-i-chain-exceptions.html?page=1 FOR EXAMPLES ON THROWING CHAINED EXCEPTIONS.




- IMPROVE PROPNET SPEED WITH INTERNAL STATE REPRESENTATION










- The refactored propnet state machine doesn't give a time limit to the duration of its initialization. It always waits until the full propnet has been created (getting stuck indefinitely if the creation gets stuck in some sort of loop). Moreover, when (and if) the propnet has been created, the state machine initialization method also waits until the consistency of the values has been imposed over all the propositions (also getting stuck indefinitely if this operation gets stuck in some sort of loop).
Both the creation of the propnet and the imposition of consistency might take a lot (or even an infinite amount) of time. For this reason they should be interruptible and thus in their code they should check from time to time if they have been interrupted (otherwise they might keep running forever anyway). Moreover, since when playing a game we don't care how much time these two operations take singularly, as long as their total time doesn't exceed the time available for initializing, it makes sense not to check the two operations separately but to just check from outside of the state machine that the initialization method of the propnet state machine doesn't take more than the available time, interrupting it if necessary. That's why it has been chosen to leave this check to be performed from the outside of the propnet state machine, so that the propnet state machine itself doesn't have to worry about checking a timeout for the initialization and every other state mahcine that uses the propnet state mahcine as a sub-state mahcine can freely choose when and how to stop initialization.

TODO: in the refactored propnet, it should be added the interruption check also in the method that imposes consistency.
HOWEVER, we can probably assume that, if the creation of the propnet ends in time and thus doesn't get stuck forever somewhere, also the imposition of consistency will not get stuck and finish sooner or later. So we could avoid adding the interruption check to it if we give it enought time to finish before the timeout, since we know it is not gonna get stuck. --> Not totally fair and safe! What if this assumption is not true? What if the imposition of consistency really takes extremely long to finish and we exceed the timeout? Do we like it being not so safe or better to have it safer affecting a bit the speed?


/**
+ * TODOOOOOO:
+ * 2. switcha alla prima versione funzionante della propnet, mergiala col master, implementa il
+ * test con MCS e runnalo sul server.
+ * 3. prova a sistemare yap prover usando DistinctAndNotMover.run(description) sulla game
+ * description per vedere se il verifier riesce a passare i test dove fallisce senza
+ * eccezione.
+ * 1. merge di yap prover refactored con il master
+ * 4. aggiungi un check del timeout anche all'aima prover
+ * 5. Va che dopo aver sistemato tutto e aver testato le varie velocitá devi anche provare tutto
+ * con la cached state machine



SUMMARY

1. YAP:	v - Test if YapSM works better after processing the GDL description (using YAPVerifier).
	v - If yes, add the processing also to the BackedYapStateMachine so that this processing won't be repeated twice (once for Yap and once for Prover).
	v - If not, nevermind, restore YapSM as it was before.
	v - Merge everything in the master.
	- Test BackedYapStateMachine speed, without and with cash.
	- Check if it is faster to scramble(a) or not to scramble(b).
	- If (a), check if code is ok and fix the problem when there are more words to substitute than possible combination of 1 or 2 letters.
	- If (b), modify the code not to scramble anymore, taking care of changing in the description the words that interfere with yap prolog reasoning
	  (e.g.: succ, ++,...).

2. PROPNET: 	- Finish refactoring the propnet and run the test with the PropnetVerifier.
		- Rename the propnet that has the internal timeout check and then merge the modified propnet in it
		- Test the propnet speed without and with cash.
		- Add the interruption check in the "impose consistency" method(remember that this check will not only affect
		  the initialization time but also the value propagation during all the execution of the propnet machine).
		- Test the new propnet speed without and with cash.
		- If it's not much slower: merge everything in the master.
		- If it is much slower: remove the interruption check, but only temporarily, cause if the propnet really gets stuck often you have to put it back!
		- Whatever the fastest is, merge it back into master.

3. PROVER:	- Test the speed without and with cash.
		x - Branch project.
		x - Add a timeout check also to the AimaProver (create FakeAimaProver that takes care of interrupting the AimaProver and recreate it?).
		x - Verify it?
		x - Test the speed without and with cash.
		x - Merge everything in the master.

4. HYBRID: 	- Create the hybrid state machine that tries to initialize the propnet and if it fails checks which one among yap+prover and prover is faster
		ATTENTION: before deciding on the behaviour of this state machine, check the results of the verifier and also of the speed tests. 





















v - TEST PROPNET CONSISTENCY VS PROVER
v - REFACTOR PROPNET STATE MACHINE CODE (REMOVE THE BUILDING TIME LIMITATION AND ADD IT TO AN EXTERNAL WRAPPING STATE MACHINE)
v - CHECK IN THE PROPNET STATE MACHINE IF ROLES ARE COMPUTED LIKE THIS: "roles = ImmutableList.copyOf(Role.computeRoles(description));"
v - RE-TEST REFACTORED PROPNET CONSISTENCY VS PROVER
V - SET UP YAP PROVER ON SERVER
V - TEST YAP PROVER CONSISTENCY VS PROVER
v - REFACTOR YAP STATE MACHINE CODE TO BE MORE MODULAR (!!!!!!!!! PROBLEM!: if there is no solution for a goal Inerprolog returns null as binding => nullPointerException is thrown when casting the element at position[0] of the bindings --> FIX THIS! MOREOVER: change the query to get the goal because atm it assumes that the goal always exists and it's only     one! But not always is true...find a way to get back all(if any) the goals and check if there is only one or if an exception has to be thrown! --> Same thing to check for other     methods (i.e. what happens if there is nothing true in the next state?, what happens if there are no legal moves???????? MOREOVER: if initialization fails the current state (i.e.     the one that should keep track of prolog state) of the state machine is null => whatever method is called next will throw a nullpointerexception when checking if it's the case to    update the prolog state or not!))
v - RE-TEST REFACTORED YAP PROVER CONSISTENCY VS PROVER
v - PER IMPLEMENTARE LA YAPSTATEMACHINE BACKED DAL GGPBASEPROVER SPOSTA IL RESET DELLA CLASSE CHE LANCIA ECCEZIONE NEL CHIMANTE DI TALE CLASSE E NON NELLA CLASSE STESSA PRIMA DI LANCIARE ECCEZIONE (I.E. INITIALIZE LANCIA ECCEZIONE SE QUALCOSA VA STORTO MA NN RESETTA NE CANCELLA NULLA, COSI IL CHIAMNTE SE NN SA CHE FARE RESETTA E CANCELLA, ALTRIMENTI PUO CHIEDERE A UN ALTRA STATE MACHINE DI CALCOLARE LO STATO INIZIALE E SETTARLO NELLA STATE MACHINE CHE HA FALLITO INIZIALIZZAZIONE).
v - PROVISSIMAAAAAAAAA: CAMBIA IL COMANDO PER LANCIARE YAP PROLOG AGGIUNGENDO NOHUP E TUTTO IL RESTO PER VEDERE SE RIESCI A DISCONNETTERTI DAL SERVER LASCIANDO CHE YAP, CHIAMATO DA JAVA, NON SI INTERROMPA --> NON FUNZIONA!
v - ADD LOGS FOR CSV IN GAMER LOGGER






FIX YAP:
- check consistency of yap state machine in both the case when distinct clauses are left in their place in rules and cases when the distinct clauses are moved to the end of every rule (the first case returns less legal moves in zhadu) - also check what happens if you use \== instead of \= to express the distinct clause in prolog (_x \= _y true if _x cannot unify in any way with _y, _x \== _y true if _x and _y are not strictly identical: first case can give less answers to a query, second case might give too many answers).
- rename all variables in the description with _lowercaseLetter instead of UPPERCASELETTER (i.e. A --> _a)
v- PROBLEM!: if there is no solution for a goal Inerprolog returns null as binding => nullPointerException is thrown when casting the element at position[0] of the bindings --> FIX THIS!
v- MOREOVER: change the query to get the goal because atm it assumes that the goal always exists and it's only one! But not alway is true...find a way to get back all(if any) the goals and check if there is only one or if an exception has to be thrown! --> Same thing to check for other methods (i.e. what happens if there is nothing true in the next state?, what happens if there are no legal moves???????? - MOREOVER: if initialization fails the current state (i.e. the one that should keep track of prolog state) of the state machine is null => whatever method is called next will throw a nullpointerexception when checking if it's the case to update the prolog state or not!
- RETURN PROLOG TERMS INSTEAD OF TRANSLATING THEM FIRST TO STRINGS ON PROLOG SIDE
- FOR YAP STATE MACHINE USE AN EXTENSION OF MACHINESTATE THAT CAN CONVERT FROM NORMAL STATE TO PROLOG STATE?
- CHECK IF IT'S FASTER TO TRANSLATE FROM GDL TO PROLOG SYNTAX USING A METHOD IN EACH GDL TERM CLASS LIKE toPrologSyntax()
- CHECK IF IT'S FASTER WITH OR WITHOUT SCRAMBLING
- CHECK HOW THE YAP STATE MACHINE COULD BE MADE FASTER (I.E. DIFFERENT STATE REPRESENTATION THAT DOESN'T NEED TRANSLATION => THE GAMER TAHT KNOWS THAT IT IS USING YAP STATE MACHINE MUST KNOW HOW TO DEAL WITH DIFFERENT STATE FORMAT + A MECHANISM IS NEEDED TO CONVERT FROM YAP STATE TO GGPBASE STATE WHEN STRICTLY NECESSARY (AND THIS WILL STILL SLOW DOWN PERFORMANCE A BIT))
- AFTER REFACTORING TEST IF GT_TWO_THIRDS... GIVES ERROR FOR THE DEFINITION OF SUCC (FIX IT!)
- ADD TO THE CODE THAT PARSES (AND OPTIONALLY SCRAMBLES) GDL INTO PROLOG A WAY TO CHECK IF A CONSTANT IN GDL HAS THE SAME NAME OF A PROLOG PREDICATE AND THUS MUST BE CHANGED (USE (*))
- CHECK IF RECORD PREDICATES HELP MAKING YAP FASTER (YAP DOCUMENTATION 6.11)







(*)FROM YAP DOCUMENTATION 6.10.2
 listing
Lists in the current output stream all the clauses for which source code is available (these include all clauses for dynamic predicates and clauses for static predicates compiled when source mode was on).

listing(+P)
Lists predicate P if its source code is available.

portray_clause(+C)
Write clause C as if written by listing/0.

portray_clause(+S,+C)
Write clause C on stream S as if written by listing/0.

current_atom(A)
Checks whether A is a currently defined atom. It is used to find all currently defined atoms by backtracking.

current_predicate(F) [ISO]
F is the predicate indicator for a currently defined user or library predicate. F is of the form Na/Ar, where the atom Na is the name of the predicate, and Ar its arity.

current_predicate(A,P)
Defines the relation: P is a currently defined predicate whose name is the atom A.

system_predicate(A,P)
Defines the relation: P is a built-in predicate whose name is the atom A.

predicate_property(P,Prop) [ISO]
For the predicates obeying the specification P unify Prop with a property of P. These properties may be:

built_in
true for built-in predicates,

dynamic
true if the predicate is dynamic

static
true if the predicate is static

meta_predicate(M)
true if the predicate has a meta_predicate declaration M.

multifile
true if the predicate was declared to be multifile

imported_from(Mod)
true if the predicate was imported from module Mod.

exported
true if the predicate is exported in the current module.

public
true if the predicate is public; note that all dynamic predicates are public.

tabled
true if the predicate is tabled; note that only static predicates can be tabled in YAP.

source
true if source for the predicate is available.

number_of_clauses(ClauseCount)
Number of clauses in the predicate definition. Always one if external or built-in. 








- LOGGING FOR EACH PLAYER (log4j2) -> ALSO TO SAVE STATISTICS IN MACHINE READABLE FORMAT -> Switch routing with StructuredDataMEssage to routing with Markers
- GRAPHICAL VISUALIZATION OF STATISTICS
- COMPARE SINGLE PLAYER USING GAMER LOGGER WITH SINGLE PLAYER USING LO4J2 (COMPARE SPEED (NODES/S) -> COMPARE FOR ALL PROVERS??)
- SET EXPERIMENTS -> CONFIGURATION OF GAMERS + CONFIGURATION OF MATCHES
- PROPNET STATE MACHINE
- GAME SERVER LOGGING
- MCTS PARALLELIZATION
- USE PROXY PLAYER (DON'T SEND BACK ONLY FINAL MOVE CHOICE, BUT ALSO INTERMEDIATE MOVE CHOICES USING THE "NOTIFY OBSERVERS" METHOD FROM THE GAMER WITH A "WORKING RESPONSE SELECTED EVENT" INSTEAD OF "GAMER SELECTED MOVE EVENT")

- (ADAPTIVE TIMEOUT CHECK) when checking for timeout: since 1 smulation can take more than 10 seconds, for the first iteration check the timeout inside the iteration. Once you have a first value as indicator of the time that one iteration takes, modify the check for timeouts accordingly. (es: if the first iteration times out, checking during iteration allows the player to send a random move in time (or the most reasonable move if there is another way to compute it). if the iteration takes 1 second the you can check for timeout after 8-9 iterations (for example))
- ridurre in controllo del timeout (una volta ogni ? iterazioni invece che dopo ogni iterazione)
- Aggiungere un limite alla profonditá del playout per assicurare che ogni simulazione termini anche nel caso di un gioco illimitato (i.e. il game tree ha dei cammini infiniti) NB: GGP games terminano sempre => non ci sono cicli nel grafo. NB2: un GDL game puó essere rappresentato piú concisamente da un DAG (directed acyclic graph)
- Aggiungere controllo globale del timeout (controllo durante le simulazioni se ho raggiunto il timeout)
- Leggi paper e guarda codice Torsten
- Implementare MCS e MCTS
- Implementare propnet + capire codice state machine
- Guardare come CADIAPLAYER gestisce timeout
- Guardare come CADIAPLAYER gestisce YAP
- Testare i player su giochi classici per GGP (othello, checkers,...)
- Re-implementare minmax e alpha-beta unificando maxscore e minscore
- Papers da leggere per GGP:
	* Simultaneous move games (matrix representation) - Chiedere titolo!
	* Libro GGP di Genesereth
	* Efficient Grounding of Game Descriptions with Tabling (Computer Games 504)
	* Cazenave - Combining nested MCS with UCT
- Guaradre materiale corso Intelligent Search & Games

PROPNET:

- implementare metodi state machine su propnet
- migliorare traduzione da GDL a PROPNET (eliminare nodi ridondanti, refactor della propnet per diminuire dimensioni, ecc... - fare i TODO elencati in GGP per lóttimizzazione della propnet)
- migliorare struttura dati (occupare meno spazio, fare meno operazioni e velocizzare il procedimento sia di traduzione sia di reasoning)


a state is defined by the perviously defined propositions. When all propositions except does are given a truth value, the game state is completely defined and can be used to reason on it. When, after reasoning, the truth value of the does propositions is assigned, it is possible to compute the next state (where all propositions will have atruth value except the does proposition)